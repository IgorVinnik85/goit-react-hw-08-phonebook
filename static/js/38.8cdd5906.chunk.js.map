{"version":3,"file":"static/js/38.8cdd5906.chunk.js","mappings":"sKACA,MAAwB,2B,mBCClBA,EAAYC,SAASC,cAAc,eAYzC,EAVoB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC5B,OAAOC,EAAAA,EAAAA,eACL,iBAAKC,UAAWC,EAAhB,UACGJ,EACAC,KAEHJ,EAEH,C,wJCoFD,UAvFc,WACZ,OAAgBQ,EAAAA,EAAAA,MAATC,GAAP,eACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,eACXC,GAAWC,EAAAA,EAAAA,MACbC,GAAeC,EAAAA,EAAAA,MACfC,GAAaD,EAAAA,EAAAA,MACjB,GAAkCV,EAAAA,EAAAA,WAAS,GAA3C,eAAOY,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAW,CACb,IAAMG,EAAQC,YAAW,WACvBH,GAAa,EACd,GAAE,MAEH,OAAO,kBAAMI,aAAaF,EAAnB,CACR,CACF,GAAE,CAACH,IAEJ,IAAMM,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACD,WAATD,GAAmBnB,EAAQoB,GAClB,aAATD,GAAqBjB,EAAYkB,EACtC,EAEKC,EAAY,mCAAG,WAAMJ,GAAN,gFACnBA,EAAMK,iBADa,SAIXC,EAAW,CACfC,MAAOzB,EACPE,SAAAA,GANe,SASMJ,EAAM0B,GAAUE,SATtB,OASXC,EATW,OAUjBC,QAAQC,IAAIF,EAASG,OACrB1B,GAAS2B,EAAAA,EAAAA,IAASJ,EAASG,QAC3BxB,EAAS,aAETsB,QAAQC,IAAI,oBAAqBF,GAdhB,kDAgBjBC,QAAQpC,MAAM,gBAAd,MACAoB,GAAa,GAjBI,0DAAH,sDAqBlB,OACE,2BACGD,IAAa,SAAC,IAAD,CAAanB,MAAO,gBAClC,kBAAMG,UAAWC,EAAAA,EAAAA,KAAUoC,SAAUV,EAArC,WACE,mBAAO3B,UAAWC,EAAAA,EAAAA,KAAUqC,QAASzB,EAArC,UAAmD,SAEjD,kBACE0B,KAAK,QACLb,MAAOrB,EACPmC,SAAUlB,EACVG,KAAK,SAGLgB,UAAQ,EACRC,GAAI7B,QAIR,mBAAOb,UAAWC,EAAAA,EAAAA,KAAUqC,QAASvB,EAArC,UAAiD,YAE/C,kBACEwB,KAAK,WACLb,MAAOnB,EACPiC,SAAUlB,EACVG,KAAK,WAGLgB,UAAQ,EACRC,GAAI3B,QAIR,mBAAQf,UAAWC,EAAAA,EAAAA,IAASsC,KAAK,SAAjC,SAA0C,gBAMjD,C,qBC7FD,KAAgB,KAAO,4BAA4B,IAAM,2B,wDCAlD,IAkBIzB,EAAS,eAAC6B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/ModalNotify/ModalNotify.module.css?b85f","components/ModalNotify/ModalNotify.jsx","pages/Login.jsx","webpack://react-homework-template/./src/components/FormPhonebook/FormPhonebook.module.css?d55d","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalNotify_modal__ZfGAV\",\"expand\":\"ModalNotify_expand__8CPk0\"};","import css from './ModalNotify.module.css';\nimport { createPortal } from 'react-dom';\nconst modalRoot = document.querySelector('#modal-root');\n\nconst ModalNotify = ({ error, success }) => {\n  return createPortal(\n    <div className={css.modal}>\n      {error}\n      {success}\n    </div>,\n    modalRoot\n  );\n};\n\nexport default ModalNotify;\n","import React from 'react';\nimport css from '../components/FormPhonebook/FormPhonebook.module.css';\nimport { nanoid } from 'nanoid';\nimport { useState, useEffect } from 'react';\nimport { setToken, useLogInMutation } from 'redux/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport ModalNotify from 'components/ModalNotify/ModalNotify';\n\nconst Login = () => {\n  const [logIn] = useLogInMutation();\n  const [mail, setMail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  let emailInputId = nanoid();\n  let passwordId = nanoid();\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    if (showModal) {\n      const timer = setTimeout(() => {\n        setShowModal(false);\n      }, 1500);\n\n      return () => clearTimeout(timer);\n    }\n  }, [showModal]);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'number') setMail(value);\n    if (name === 'password') setPassword(value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const userData = {\n        email: mail,\n        password,\n      };\n\n      const response = await logIn(userData).unwrap();\n      console.log(response.token);\n      dispatch(setToken(response.token));\n      navigate('/contacts');\n\n      console.log('Login successful:', response);\n    } catch (error) {\n      console.error('Login failed:', error);\n      setShowModal(true);\n    }\n  };\n\n  return (\n    <div>\n      {showModal && <ModalNotify error={'Wrong data'} />}\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.form} htmlFor={emailInputId}>\n          Email\n          <input\n            type=\"email\"\n            value={mail}\n            onChange={handleInputChange}\n            name=\"number\"\n            //   pattern=\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\n            //   title=\"Please enter a valid email address\"\n            required\n            id={emailInputId}\n          />\n        </label>\n\n        <label className={css.form} htmlFor={passwordId}>\n          Password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            name=\"password\"\n            //   pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n            //   title=\"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit\"\n            required\n            id={passwordId}\n          />\n        </label>\n\n        <button className={css.btn} type=\"submit\">\n          Log in\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormPhonebook_form__yE3-g\",\"btn\":\"FormPhonebook_btn__5b-dH\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["modalRoot","document","querySelector","error","success","createPortal","className","css","useLogInMutation","logIn","useState","mail","setMail","password","setPassword","dispatch","useDispatch","navigate","useNavigate","emailInputId","nanoid","passwordId","showModal","setShowModal","useEffect","timer","setTimeout","clearTimeout","handleInputChange","event","currentTarget","name","value","handleSubmit","preventDefault","userData","email","unwrap","response","console","log","token","setToken","onSubmit","htmlFor","type","onChange","required","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}