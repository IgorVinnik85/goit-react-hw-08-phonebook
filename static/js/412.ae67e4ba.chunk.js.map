{"version":3,"file":"static/js/412.ae67e4ba.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsPhonebook/ContactsPhonebook.module.css?88b6","components/ContactsPhonebookItem/ContactsPhonebookItem.jsx","components/ContactsPhonebook/ContactsPhonebook.jsx","webpack://react-homework-template/./src/components/ModalNotify/ModalNotify.module.css?b85f","components/ModalNotify/ModalNotify.jsx","components/FindContacts/FindContacts.jsx","components/FormPhonebook/FormPhonebook.jsx","pages/Contacts.jsx","webpack://react-homework-template/./src/components/FormPhonebook/FormPhonebook.module.css?d55d"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsPhonebook_list__Gs+B5\",\"item\":\"ContactsPhonebook_item__Xf3WR\",\"btn\":\"ContactsPhonebook_btn__tpBX1\",\"spinner\":\"ContactsPhonebook_spinner__pdAe3\",\"itemWrapper\":\"ContactsPhonebook_itemWrapper__bpPbh\"};","import css from '../ContactsPhonebook/ContactsPhonebook.module.css';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\nimport { getFilter, getToken } from 'redux/selectors';\nimport {\n  useGetContactsQuery,\n  useDeleteContactsMutation,\n} from 'redux/contactsSlice';\n\nexport const ContactsPhonebookItem = () => {\n  const token = useSelector(getToken);\n  const { data: contacts, isLoading } = useGetContactsQuery(token);\n  const [deleteContact] = useDeleteContactsMutation();\n\n  const filter = useSelector(getFilter);\n  const filteredContacts = () =>\n    contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n\n  const handleDelete = async id => {\n    try {\n      await deleteContact({ id, token });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      {isLoading && (\n        <div className={css.spinner}>\n          <ThreeDots\n            height=\"80\"\n            width=\"80\"\n            radius=\"9\"\n            color=\"#4fa94d\"\n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{}}\n            wrapperClassName=\"\"\n            visible={true}\n          />\n        </div>\n      )}\n      {contacts &&\n        filteredContacts()?.map(el => {\n          return (\n            <li className={css.item} key={el.id}>\n              <div className={css.itemWrapper}>\n                <span> {el.name}</span>\n              </div>\n              <div className={css.itemWrapper}> \n                <span> {el.number}</span>\n              </div>\n              <div className={css.itemWrapper}>\n                <button\n                  className={css.btn}\n                  type=\"button\"\n                  onClick={() => handleDelete(el.id)}\n                >\n                  delete\n                </button>\n              </div>\n            </li>\n          );\n        })}\n    </>\n  );\n};\n","// import PropTypes from 'prop-types';\nimport { ContactsPhonebookItem } from 'components/ContactsPhonebookItem/ContactsPhonebookItem';\nimport css from './ContactsPhonebook.module.css';\n\nexport const ContactsPhonebook = () => {\n  return (\n    <>\n      <h2>Contacts</h2>\n      <ul className={css.list}>\n        <ContactsPhonebookItem/>\n      </ul>\n    </>\n  );\n};\n\n// axelocc1233@gmail.com\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalNotify_modal__ZfGAV\",\"expand\":\"ModalNotify_expand__8CPk0\"};","import css from './ModalNotify.module.css';\nimport { createPortal } from 'react-dom';\nconst modalRoot = document.querySelector('#modal-root');\n\nconst ModalNotify = ({ error, success }) => {\n  return createPortal(\n    <div className={css.modal}>\n      {error}\n      {success}\n    </div>,\n    modalRoot\n  );\n};\n\nexport default ModalNotify;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { getFilter } from \"redux/selectors\";\nimport { fillterContacts } from \"redux/contactsSlice\";\n\nexport const FindContacts = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onInput = (event) => {\n    console.log(event.target.value);\n    dispatch(fillterContacts(event.target.value));\n  };\n\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        placeholder=\"Enter find name\"\n        value={filter}\n        onChange={onInput}\n      />\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport css from './FormPhonebook.module.css';\nimport { nanoid } from 'nanoid';\nimport {\n  useGetContactsQuery,\n  useAddContactMutation,\n} from 'redux/contactsSlice';\nimport { getToken } from 'redux/selectors';\n\nexport const FormPhonebook = () => {\n  const token = useSelector(getToken);\n  const { data: contacts } = useGetContactsQuery(token);\n  const [addContact] = useAddContactMutation();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  let nameInputId = nanoid();\n  let numberInputId = nanoid();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const { name, number } = event.target.elements;\n    if (contacts.find(element => element.name === name.value)) {\n      alert(`${name.value} is alredy in contacts`);\n      return;\n    }\n    try {\n      await addContact({\n        contactData: {\n          name: name.value,\n          number: number.value,\n          id: nanoid(),\n        },\n        token,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.form} htmlFor={nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            value={name}\n            onChange={handleInputChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n          />\n        </label>\n        <label className={css.form} htmlFor={numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            value={number}\n            onChange={handleInputChange}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id={numberInputId}\n          />\n        </label>\n\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n","import { FindContacts } from 'components/FindContacts/FindContacts';\nimport { FormPhonebook } from 'components/FormPhonebook/FormPhonebook';\nimport { useSelector } from 'react-redux';\nimport { getToken } from 'redux/selectors';\nimport ModalNotify from 'components/ModalNotify/ModalNotify';\nimport { useState, useEffect } from 'react';\n\nconst {\n  ContactsPhonebook,\n} = require('components/ContactsPhonebook/ContactsPhonebook');\n\nconst Contacts = () => {\n  const [showModal, setShowModal] = useState(true);\n  const token = useSelector(getToken);\n\n  useEffect(() => {\n    if (showModal) {\n      const timer = setTimeout(() => {\n        setShowModal(false);\n      }, 1500);\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [showModal]);\n\n  return (\n    <>\n      {showModal && <ModalNotify success={'Login Successful'} />}\n      {token && (\n        <>\n          <FormPhonebook />\n          <FindContacts />\n          <ContactsPhonebook />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormPhonebook_form__yE3-g\",\"btn\":\"FormPhonebook_btn__5b-dH\"};"],"names":["ContactsPhonebookItem","token","useSelector","getToken","useGetContactsQuery","contacts","data","isLoading","useDeleteContactsMutation","deleteContact","filter","getFilter","handleDelete","id","console","log","className","css","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","contact","name","toLowerCase","includes","map","el","number","type","onClick","ContactsPhonebook","modalRoot","document","querySelector","error","success","createPortal","FindContacts","dispatch","useDispatch","placeholder","value","onChange","event","target","fillterContacts","FormPhonebook","useAddContactMutation","addContact","useState","setName","setNumber","nameInputId","nanoid","numberInputId","handleInputChange","currentTarget","handleSubmit","preventDefault","elements","find","element","alert","contactData","reset","onSubmit","htmlFor","pattern","title","required","require","showModal","setShowModal","useEffect","timer","setTimeout","clearTimeout","ModalNotify"],"sourceRoot":""}